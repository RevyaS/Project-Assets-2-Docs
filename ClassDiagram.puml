@startuml

namespace ProjectAssets {
    class Game <<Component>> {
        .. States ..
        LocationState locationState
        CharacterState characterState
        .. Repositories ..
        LocationRepository locationRepository
        CharacterRepository characterRepository
        .. Systems ..
        LocationService locationService
        Location location
        Interaction interaction

    }

    Game "1" o-- "1" Locations.Location
    Game "1" o-- "1" Characters.Interaction
}

namespace ProjectAssets.Data  {
    class LocationSpotCharacter {
        string characterName
        LocationSpotMap spot
    }

   class PlayerData {
        RuleSet<InteractRule> rules
   }
}

namespace ProjectAssets.Systems {
    class LocationSystems {
        LocationRepository locationRepository
    } 

    LocationSystems ..> ProjectAssets.Repositories.LocationRepository
}

namespace ProjectAssets.Repositories {
    class LocationRepository <<Repository>> {
        LocationView GetLocationView(LocationName Name)
    }

    class CharacterRepository <<Repository>> {

    }
}

namespace ProjectAssets.Characters {
    class Interaction <<Component>> {
        
    }

    class InteractionView <<View>> {

    }

    class CharacterState <<LogicBlock>> {
        Characters.State currentState
        void Input(Input input)
        void When<State>()
    }
}

namespace ProjectAssets.Characters.Data <<Rectangle>> {
    class CharacterData <<Resource>> {
        +string FirstName
        +string LastName
        +CharacterInteractImages InteractImages
    }

    class CharacterInteractImages <<Resource>> {
        +Texture2D Default
        +Texture2D Startled
        +Texture2D Surprised
    }
}

namespace ProjectAssets.Characters.Input <<Rectangle>> {
    struct Stop {

    }

    struct Interact {
        CharacterData character
    }

    struct Ask {
        CharacterData character
    }

    struct Talk {
        CharacterData character
    }
}

namespace ProjectAssets.Characters.State <<Rectangle>> {
    class Stop {
        void Input(Input.Interact input)
    }

    class Interact {
        void Input(Input.Stop input)
        void Input(Input.Ask input)
        void Input(Input.Talk input)
    }

    class Ask {
        void Input(Input.Stop input)
        void Input(Input.Interact input)
    }

    class Talk {
        void Input(Input.Stop input)
        void Input(Input.Interact input)
    }
}

namespace ProjectAssets.Locations {
    class Location <<Component>> {
        LocationView view
        LocationRepository locationRepository
    }

    class LocationView <<View>> {
        +Texture2D BG
        +RedirectButton[] Buttons
        +LocationName LocationName
    }

    class RedirectButton <<Component>> { 
        + string TargetLocation
        + string Text
        LocationState locationState
        onClick()
    }

    class LocationSpot <<Component>> {
        LocationSpotView view

    }


    class LocationSpotView <<View>> {
        LocationSpot[] locationSpot
    }

    class LocationState <<LogicBlock>> {
        Locations.State currentState
        void Input(Input input)
        void When<State>()
    }

    LocationSpotView ..> LocationState
    RedirectButton ..> LocationState
    Location "1" o-- "1" LocationView : Sets
    LocationView "1" *-- "0..*" LocationSpot
    LocationSpot "1" *-- "1" LocationSpotView

    LocationView "1" o-- "1..*" RedirectButton
}


namespace ProjectAssets.Locations.Data <<Rectangle>> {
     class LocationSpotMap {
        LocationName LocationName
        LocationSpotName LocationSpotName
    }

    class LocationName {
        string LocationName
    } 

    class LocationSpotName {
        string LocationName
    } 
}

namespace ProjectAssets.Locations.Input <<Rectangle>> {
    struct Stop { }

    struct Show { }

    struct ChangeLocation {
        string LocationName
    }
}

namespace ProjectAssets.Locations.State <<Rectangle>> {
    class Active {
        LocationRepository locationRepository

        void Input(Input.ChangeLocation input)
        void Input(Input.Stop input)
    }

    class Stop {
        void Input(Input.Show input)
    } 
    Active ..> LocationRepository
}

@enduml